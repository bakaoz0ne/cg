
#include <iostream>
#include <GL/glut.h>
#define outcode int
// Clipping window
double xmin = 100, ymin = 100, xmax = 200, ymax = 200;
// Viewport
double xvmin = 300, yvmin = 300, xvmax = 400, yvmax = 400;
const int RIGHT = 8;
const int LEFT = 2;
const int TOP = 4;
const int BOTTOM = 1;
int n = 0; // number of vertices clicked
GLfloat obj[100][2]; // stores input polygon points
void myinit() {
 glClearColor(1.0, 1.0, 1.0, 1.0); // White background
 glMatrixMode(GL_PROJECTION);
 glLoadIdentity();
 gluOrtho2D(0.0, 500.0, 0.0, 500.0);
 glPointSize(5.0); // Make points visible
}
outcode ComputeOutCode(double x, double y) {
 outcode code = 0;
 if (y > ymax) code |= TOP;
 else if (y < ymin) code |= BOTTOM;
 if (x > xmax) code |= RIGHT;
 else if (x < xmin) code |= LEFT;
 return code;
}
// Cohen-Sutherland clipping algorithm
void CohenSutherland(double x0_clip, double y0_clip, double x1_clip, double y1_clip) {
 outcode outcode0 = ComputeOutCode(x0_clip, y0_clip);
 outcode outcode1 = ComputeOutCode(x1_clip, y1_clip);
 bool accept = false, done = false;
 do {
 if (!(outcode0 | outcode1)) {
 accept = true; // Both endpoints inside
 done = true;
 } else if (outcode0 & outcode1) {
 done = true; // Completely outside
 } else {
 double x, y;
 outcode outcodeOut = outcode0 ? outcode0 : outcode1;
 if (outcodeOut & TOP) {
 x = x0_clip + (x1_clip - x0_clip) * (ymax - y0_clip) / (y1_clip - y0_clip);
 y = ymax;
 } else if (outcodeOut & BOTTOM) {
 x = x0_clip + (x1_clip - x0_clip) * (ymin - y0_clip) / (y1_clip - y0_clip);
 y = ymin;
 } else if (outcodeOut & RIGHT) {
 y = y0_clip + (y1_clip - y0_clip) * (xmax - x0_clip) / (x1_clip - x0_clip);
 x = xmax;
 } else {
 y = y0_clip + (y1_clip - y0_clip) * (xmin - x0_clip) / (x1_clip - x0_clip);
 x = xmin;
 }
 if (outcodeOut == outcode0) {
 x0_clip = x;
 y0_clip = y;
 outcode0 = ComputeOutCode(x0_clip, y0_clip);
 } else {
 x1_clip = x;
 y1_clip = y;
 outcode1 = ComputeOutCode(x1_clip, y1_clip);
 }
 }
 } while (!done);
 if (accept) {
 // Map to viewport
 double sx = (xvmax - xvmin) / (xmax - xmin);
 double sy = (yvmax - yvmin) / (ymax - ymin);
 double vx0 = xvmin + (x0_clip - xmin) * sx;
 double vy0 = yvmin + (y0_clip - ymin) * sy;
 double vx1 = xvmin + (x1_clip - xmin) * sx;
 double vy1 = yvmin + (y1_clip - ymin) * sy;
 glColor3f(0.0, 0.0, 0.0); // Black clipped lines
 glBegin(GL_LINES);
 glVertex2d(vx0, vy0);
 glVertex2d(vx1, vy1);
 glEnd();
 }
}
void display() {
 glClear(GL_COLOR_BUFFER_BIT);
 // Draw clipping window
 glColor3f(1.0, 0.0, 0.0); // Red
 glBegin(GL_LINE_LOOP);
 glVertex2f(xmin, ymin);
 glVertex2f(xmax, ymin);
 glVertex2f(xmax, ymax);
 glVertex2f(xmin, ymax);
 glEnd();
 // Draw viewport
 glColor3f(0.0, 0.0, 1.0); // Blue
 glBegin(GL_LINE_LOOP);
 glVertex2f(xvmin, yvmin);
 glVertex2f(xvmax, yvmin);
 glVertex2f(xvmax, yvmax);
 glVertex2f(xvmin, yvmax);
 glEnd();
 glFlush();
}
void myKeyboard(unsigned char key, int mousex, int mouseY) {
 if (key == 27) { // ESC to exit
 exit(0);
 }
}
void myMouse(int button, int state, int x, int y) {
 if (state == GLUT_DOWN) {
 if (button == GLUT_LEFT_BUTTON) {
 obj[n][0] = x;
 obj[n][1] = 500 - y;
 glColor3f(0.0, 0.0, 0.0);
 glBegin(GL_POINTS);
 glVertex2f(obj[n][0], obj[n][1]);
 glEnd();
 glFlush();
 n++;
 } else if (button == GLUT_RIGHT_BUTTON) {
 // Draw the original polygon
 glColor3f(0.5, 0.5, 0.5); // Gray original polygon
 glBegin(GL_LINE_LOOP);
 for (int i = 0; i < n; i++)
 glVertex2f(obj[i][0], obj[i][1]);
 glEnd();
 glFlush();
 // Clip each edge of polygon
 for (int i = 0; i < n; i++) {
 int j = (i + 1) % n;
 CohenSutherland(obj[i][0], obj[i][1], obj[j][0], obj[j][1]);
 }
 glFlush();
 n = 0; // Reset for next polygon
 }
 }
}
int main(int argc, char **argv) {
 glutInit(&argc, argv);
 glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
 glutInitWindowSize(500, 500);
 glutInitWindowPosition(100, 100);
 glutCreateWindow("Cohen-Sutherland Polygon Clipping");
 myinit();
 glutDisplayFunc(display);
 glutKeyboardFunc(myKeyboard);
 glutMouseFunc(myMouse);
 glutMainLoop();
 return 0;
}
OUTPUT:
