#include <iostream>
#include <cmath>
#include <GL/glut.h>

using namespace std;

int option, drawoption;

// Function to check if 3 points can form a valid triangle
bool isValidTriangle(float x1, float y1, float x2, float y2, float x3, float y3)
{
    float a = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
    float b = sqrt(pow(x3 - x2, 2) + pow(y3 - y2, 2));
    float c = sqrt(pow(x1 - x3, 2) + pow(y1 - y3, 2));

    return (a + b > c) && (b + c > a) && (c + a > b);
}

// DDA Line Drawing
void drawLine(int xx1, int yy1, int xx2, int yy2, int s)
{
    float x, y, dx, dy, length;
    int i, t = 0;
    dx = abs(xx2 - xx1);
    dy = abs(yy2 - yy1);

    if (dx > dy)
        length = dx;
    else
        length = dy;

    dx = (float)(xx2 - xx1) / length;
    dy = (float)(yy2 - yy1) / length;

    x = xx1;
    y = yy1;
    i = 1;

    while (i <= length)
    {
        switch (s)
        {
        case 1: // Simple
            glPointSize(1.0);
            glBegin(GL_POINTS);
            glVertex2i(round(x), round(y));
            glEnd();
            break;
        case 2: // Dotted
            if (i % 20 == 0)
            {
                glPointSize(1.0);
                glBegin(GL_POINTS);
                glVertex2i(round(x), round(y));
                glEnd();
            }
            break;
        case 3: // Dashed
            if (i % 15 == 0)
            {
                t = 1 - t;
            }
            if (t == 0)
            {
                glPointSize(1.0);
                glBegin(GL_POINTS);
                glVertex2i(round(x), round(y));
                glEnd();
            }
            break;
        case 4: // Solid
            glPointSize(3.0);
            glBegin(GL_POINTS);
            glVertex2i(round(x), round(y));
            glEnd();
            break;
        }

        x += dx;
        y += dy;
        i++;
    }
}

// Axis lines
void drawAxes()
{
    glBegin(GL_LINES);
    glVertex2i(-500, 0);
    glVertex2i(500, 0);
    glVertex2i(0, -500);
    glVertex2i(0, 500);
    glEnd();
}

// OpenGL Display
void display()
{
    glFlush();
}

// Initialization
void init()
{
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-500.0, 500.0, -500.0, 500.0);
    drawAxes();
    glFlush();
}

// Keyboard Input (Esc to exit)
void inputKeyboard(unsigned char key, int mouseX, int mouseY)
{
    if (key == 27)
        exit(0);
}

// Mouse Input
void inputMouse(int button, int state, int x, int y)
{
    static int x1, y1, x2, y2, x3, y3;
    static int pt = 0;

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        if (pt == 0)
        {
            x1 = x;
            y1 = y;
            pt++;
        }
        else if (pt == 1)
        {
            x2 = x;
            y2 = y;
            pt++;
        }
        else if (pt == 2)
        {
            x3 = x;
            y3 = y;

            // Convert to OpenGL coordinate system
            int X1 = -500 + 2 * x1;
            int Y1 = 500 - 2 * y1;
            int X2 = -500 + 2 * x2;
            int Y2 = 500 - 2 * y2;
            int X3 = -500 + 2 * x3;
            int Y3 = 500 - 2 * y3;

            // Clear screen and redraw axes
            glClear(GL_COLOR_BUFFER_BIT);
            drawAxes();

            if (isValidTriangle(X1, Y1, X2, Y2, X3, Y3))
            {
                drawLine(X1, Y1, X2, Y2, option);
                drawLine(X2, Y2, X3, Y3, option);
                drawLine(X3, Y3, X1, Y1, option);
                cout << "Triangle drawn.\n";
            }
            else
            {
                cout << "Invalid triangle: points are collinear or degenerate.\n";
            }

            pt = 0;
            glFlush();
        }
    }
}

// Menu selection
void menu(int choice)
{
    option = choice;
}

int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("DDA Line Drawing with Triangle Validation");

    init();
    glutDisplayFunc(display);
    glutKeyboardFunc(inputKeyboard);
    glutMouseFunc(inputMouse);

    glutCreateMenu(menu);
    glutAddMenuEntry("DDA Simple", 1);
    glutAddMenuEntry("DDA Dotted", 2);
    glutAddMenuEntry("DDA Dashed", 3);
    glutAddMenuEntry("DDA Solid", 4);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
    return 0;
}
