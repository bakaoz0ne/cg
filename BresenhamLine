#include <iostream>
#include <cmath>
#include <GL/glut.h>

using namespace std;

int option = 1; // Default line style

// Function to check if 3 points form a valid triangle
bool isValidTriangle(float x1, float y1, float x2, float y2, float x3, float y3)
{
    float a = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
    float b = sqrt(pow(x3 - x2, 2) + pow(y3 - y2, 2));
    float c = sqrt(pow(x1 - x3, 2) + pow(y1 - y3, 2));
    return (a + b > c) && (b + c > a) && (c + a > b);
}

// Bresenham's Line Drawing Algorithm
void drawLine(int xx1, int yy1, int xx2, int yy2, int style)
{
    int dx = abs(xx2 - xx1);
    int dy = abs(yy2 - yy1);
    int p = 2 * dy - dx;
    int x, y, xEnd;

    if (xx1 > xx2)
    {
        x = xx2;
        y = yy2;
        xEnd = xx1;
    }
    else
    {
        x = xx1;
        y = yy1;
        xEnd = xx2;
    }

    glBegin(GL_POINTS);
    switch (style)
    {
    case 1: // Simple
        glPointSize(1.0);
        glVertex2i(x, y);
        break;
    case 2: // Dotted
        if ((x + y) % 20 == 0)
        {
            glPointSize(1.0);
            glVertex2i(x, y);
        }
        break;
    case 3: // Dashed
        if ((x + y) % 15 == 0)
            glVertex2i(x, y);
        break;
    case 4: // Solid thick
        glPointSize(3.0);
        glVertex2i(x, y);
        break;
    }

    while (x < xEnd)
    {
        x++;
        if (p < 0)
            p += 2 * dy;
        else
        {
            y++;
            p += 2 * (dy - dx);
        }

        switch (style)
        {
        case 1: // Simple
            glPointSize(1.0);
            glVertex2i(x, y);
            break;
        case 2: // Dotted
            if ((x + y) % 20 == 0)
            {
                glPointSize(1.0);
                glVertex2i(x, y);
            }
            break;
        case 3: // Dashed
            if ((x + y) % 15 == 0)
                glVertex2i(x, y);
            break;
        case 4: // Solid thick
            glPointSize(3.0);
            glVertex2i(x, y);
            break;
        }
    }
    glEnd();
}

// Draw X and Y Axes
void drawAxes()
{
    glColor3f(1.0, 1.0, 1.0); // white lines
    glBegin(GL_LINES);
    glVertex2i(-500, 0);
    glVertex2i(500, 0); // X-axis
    glVertex2i(0, -500);
    glVertex2i(0, 500); // Y-axis
    glEnd();
}

// Display function
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    drawAxes();  // Ensure axes are always drawn
    glFlush();
}

// Initialization
void init()
{
    glClearColor(0.0, 0.0, 0.0, 1.0); // black background
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-500.0, 500.0, -500.0, 500.0); // coordinate system
}

// Keyboard handler
void inputKeyboard(unsigned char key, int mouseX, int mouseY)
{
    if (key == 27) exit(0); // ESC to exit
}

// Mouse handler
void inputMouse(int button, int state, int x, int y)
{
    static int x1, y1, x2, y2, x3, y3;
    static int pt = 0;

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
    {
        if (pt == 0)
        {
            x1 = x;
            y1 = y;
            pt++;
        }
        else if (pt == 1)
        {
            x2 = x;
            y2 = y;
            pt++;
        }
        else if (pt == 2)
        {
            x3 = x;
            y3 = y;

            // Convert to OpenGL coordinates
            int X1 = -500 + 2 * x1;
            int Y1 = 500 - 2 * y1;
            int X2 = -500 + 2 * x2;
            int Y2 = 500 - 2 * y2;
            int X3 = -500 + 2 * x3;
            int Y3 = 500 - 2 * y3;

            glClear(GL_COLOR_BUFFER_BIT);
            drawAxes(); // Redraw axes

            if (isValidTriangle(X1, Y1, X2, Y2, X3, Y3))
            {
                drawLine(X1, Y1, X2, Y2, option);
                drawLine(X2, Y2, X3, Y3, option);
                drawLine(X3, Y3, X1, Y1, option);
                cout << "Triangle drawn.\n";
            }
            else
            {
                cout << "Invalid triangle: points are collinear or degenerate.\n";
            }

            pt = 0;
            glFlush();
        }
    }
}

// Menu handler
void menu(int choice)
{
    option = choice;
}

// Main function
int main(int argc, char **argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(0, 0);
    glutCreateWindow("Bresenham Line Drawing with Triangle Validation");

    init();
    glutDisplayFunc(display);
    glutKeyboardFunc(inputKeyboard);
    glutMouseFunc(inputMouse);

    glutCreateMenu(menu);
    glutAddMenuEntry("Bresenham Simple", 1);
    glutAddMenuEntry("Bresenham Dotted", 2);
    glutAddMenuEntry("Bresenham Dashed", 3);
    glutAddMenuEntry("Bresenham Solid", 4);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
    return 0;
}
